nameOverride: ""
fullnameOverride: ""

image:
  repository: abrampers/inkle
  pullPolicy: IfNotPresent

elastic:
  filebeat: true
  enabled: true

device: "cni0"
logPath: "/var/log"
filterByHost: true

resources: # TODO: Find correct number
  limits:
    cpu: 100m
    memory: 200Mi
  requests:
    cpu: 100m
    memory: 200Mi

filebeat:
  extraVolumes:
  - name: varlog
    hostPath: 
      path: /var/log
  extraVolumeMounts:
  - name: varlog
    mountPath: /var/log
    readOnly: true
  filebeatConfig:
    filebeat.yml: |
      filebeat.inputs:
      - type: log
        enabled: true
        paths:
          - /var/log/inkle.log
      output.logstash:
        hosts: ["logstash:5044"]

elasticsearch:
  replicas: 1
  persistence:
    enabled: false
  readinessProbe:
    initialDelaySeconds: 200
  sysctlInitContainer:
    enabled: false
  esConfig:
    elasticsearch.yml: |
      node.store.allow_mmap: false
  antiAffinity: "soft"
  esJavaOpts: "-Xmx128m -Xms128m"
  resources:
    requests:
      cpu: "100m"
      memory: "512M"
    limits:
      cpu: "1000m"
      memory: "512M"
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    storageClassName: "microk8s-hostpath"
    resources:
      requests:
        storage: 100M

logstash:
  fullnameOverride: "logstash"
  service:
    annotations: {}
    type: ClusterIP
    ports:
      - name: beats
        port: 5044
        protocol: TCP
        targetPort: 5044
      - name: http
        port: 8080
        protocol: TCP
        targetPort: 8080
  extraVolumes: |
    - name: inkletemplate
      configMap:
        name: inkle-index-template
  extraVolumeMounts: |
    - name: inkletemplate
      mountPath: /etc/logstash/templates/inkle.json
      subPath: inkle.json
  logstashPipeline:
    logstash.conf: |
      input {
        beats {
          port => "5044"
        }
      }
      filter {
        csv {
          separator => ","
          columns => [ "grpc_service_name", "grpc_method_name", "src_ip",
          "src_tcp_port", "dst_ip", "dst_tcp_port", "grpc_status_code", "duration",
          "info"]
        }
        mutate {
          convert => {
            "duration" => "float"
          }
        }
        ruby {
          code => "event.set('duration', event.get('duration') / 1000000)"
        } 
      }
      output {
        elasticsearch {
          hosts => [ "elasticsearch-master:9200" ]
          index => "inkle-%{+YYYY.MM.dd}"
          template => "/etc/logstash/templates/inkle.json"
          template_name => "inkle-log"
        }
      }

