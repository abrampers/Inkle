package intercept

import (
	"bytes"
	"reflect"
	"testing"

	"golang.org/x/net/http2"
)

func TestHeaders(t *testing.T) {
	tests := []struct {
		bytes []byte
		want  map[string]string
	}{
		{
			bytes: []byte{
				0x00, 0x00, 0x5e, 0x01, 0x04, 0x00, 0x00, 0x00,
				0x01, 0x83, 0x86, 0x45, 0x95, 0x62, 0x72, 0xd1,
				0x41, 0xfc, 0x1e, 0xca, 0x24, 0x5f, 0x15, 0x85,
				0x2a, 0x4b, 0x63, 0x1b, 0x87, 0xeb, 0x19, 0x68,
				0xa0, 0xff, 0x41, 0x8a, 0xa0, 0xe4, 0x1d, 0x13,
				0x9d, 0x09, 0xb8, 0xf0, 0x00, 0x0f, 0x5f, 0x8b,
				0x1d, 0x75, 0xd0, 0x62, 0x0d, 0x26, 0x3d, 0x4c,
				0x4d, 0x65, 0x64, 0x7a, 0x8d, 0x9a, 0xca, 0xc8,
				0xb4, 0xc7, 0x60, 0x2b, 0x89, 0xe5, 0xc0, 0xb4,
				0x85, 0xef, 0x40, 0x02, 0x74, 0x65, 0x86, 0x4d,
				0x83, 0x35, 0x05, 0xb1, 0x1f, 0x40, 0x89, 0x9a,
				0xca, 0xc8, 0xb2, 0x4d, 0x49, 0x4f, 0x6a, 0x7f,
				0x86, 0x7d, 0xf7, 0xdf, 0x71, 0xeb, 0x7f,
			},
			want: map[string]string{
				":method":      "POST",
				":scheme":      "http",
				":path":        "/helloworld.Greeter/SayHello",
				":authority":   "localhost:8000",
				"content-type": "application/grpc",
				"user-agent":   "grpc-go/1.28.0-dev",
				"te":           "trailers",
				"grpc-timeout": "999968u",
			},
		},
		{
			bytes: []byte{
				0x00, 0x00, 0x0e, 0x01, 0x04, 0x00, 0x00, 0x00,
				0x01, 0x88, 0x5f, 0x8b, 0x1d, 0x75, 0xd0, 0x62,
				0x0d, 0x26, 0x3d, 0x4c, 0x4d, 0x65, 0x64,
			},
			want: map[string]string{
				":status":      "200",
				"content-type": "application/grpc",
			},
		},
		{
			bytes: []byte{
				0x00, 0x00, 0x18, 0x01, 0x05, 0x00, 0x00, 0x00,
				0x01, 0x40, 0x88, 0x9a, 0xca, 0xc8, 0xb2, 0x12,
				0x34, 0xda, 0x8f, 0x01, 0x30, 0x40, 0x89, 0x9a,
				0xca, 0xc8, 0xb5, 0x25, 0x42, 0x07, 0x31, 0x7f,
				0x00,
			},
			want: map[string]string{
				"grpc-status":  "0",
				"grpc-message": "",
			},
		},
	}

	for i, test := range tests {
		framer := http2.NewFramer(nil, bytes.NewReader(test.bytes))
		frame, _ := framer.ReadFrame()
		headersframe := frame.(*http2.HeadersFrame)
		if ret := Headers(*headersframe); !reflect.DeepEqual(test.want, ret) {
			t.Errorf("Headers (testcase %d): returns incorrect headers", i)
		}
	}
}
